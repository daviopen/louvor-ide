# Makefile para Louvor IDE
# Sistema de Cifras Musicais

# Vari√°veis
PROJECT_NAME = louvor-ide
NODE_VERSION = 20
FIREBASE_PROJECT = louvor-ide
LOCAL_PORT = 5000

# Cores para output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

.PHONY: help install setup dev serve build deploy clean test status check-deps

# Target padr√£o
all: help

## üìã Ajuda
help:
	@echo ""
	@echo "$(BLUE)üéµ Louvor IDE - Sistema de Cifras$(NC)"
	@echo ""
	@echo "$(YELLOW)Comandos dispon√≠veis:$(NC)"
	@echo ""
	@echo "  $(GREEN)make setup$(NC)       - Configura√ß√£o inicial completa"
	@echo "  $(GREEN)make dev$(NC)         - Ambiente de desenvolvimento (com build)"
	@echo "  $(GREEN)make serve-fast$(NC)  - Servidor r√°pido (sem rebuild)"
	@echo "  $(GREEN)make build$(NC)       - Build para produ√ß√£o"
	@echo "  $(GREEN)make test$(NC)        - Executar testes"
	@echo "  $(GREEN)make deploy$(NC)      - Deploy para Firebase Hosting"
	@echo "  $(GREEN)make clean$(NC)       - Limpar arquivos tempor√°rios"
	@echo ""
	@echo "$(YELLOW)Desenvolvimento:$(NC)"
	@echo "  1. $(GREEN)make dev$(NC)        - Primeira execu√ß√£o (setup + build + servidor)"
	@echo "  2. $(GREEN)make serve-fast$(NC) - Execu√ß√µes seguintes (apenas servidor)"
	@echo ""
	@echo "$(YELLOW)URLs:$(NC)"
	@echo "  Local:      http://localhost:$(LOCAL_PORT)"
	@echo "  Produ√ß√£o:   https://$(FIREBASE_PROJECT).web.app"
	@echo ""
	@echo "  $(GREEN)make serve$(NC)       - Servidor local (Firebase)"
	@echo "  $(GREEN)make build$(NC)       - Build para produ√ß√£o"
	@echo "  $(GREEN)make deploy$(NC)      - Deploy manual para Firebase"
	@echo "  $(GREEN)make test$(NC)        - Executar testes"
	@echo "  $(GREEN)make status$(NC)      - Verificar status do deploy"
	@echo "  $(GREEN)make clean$(NC)       - Limpar arquivos tempor√°rios"
	@echo ""
	@echo "$(YELLOW)Comandos de CI/CD:$(NC)"
	@echo ""
	@echo "  $(GREEN)make install$(NC)     - Instalar depend√™ncias"
	@echo "  $(GREEN)make check-deps$(NC)  - Verificar depend√™ncias"
	@echo ""

## üîß Verificar depend√™ncias
check-deps:
	@echo "$(BLUE)üîç Verificando depend√™ncias...$(NC)"
	@command -v node >/dev/null 2>&1 || { echo "$(RED)‚ùå Node.js n√£o encontrado$(NC)"; exit 1; }
	@command -v npm >/dev/null 2>&1 || { echo "$(RED)‚ùå npm n√£o encontrado$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ Node.js $$(node --version)$(NC)"
	@echo "$(GREEN)‚úÖ npm $$(npm --version)$(NC)"

## üì¶ Instalar depend√™ncias
install: check-deps
	@echo "$(BLUE)üì¶ Instalando depend√™ncias...$(NC)"
	@if ! command -v firebase &> /dev/null; then \
		echo "$(YELLOW)üì• Instalando Firebase CLI...$(NC)"; \
		npm install -g firebase-tools; \
	else \
		echo "$(GREEN)‚úÖ Firebase CLI j√° instalado$$(firebase --version)$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Depend√™ncias instaladas$(NC)"

## ‚öôÔ∏è Configura√ß√£o inicial completa
setup: install
	@echo "$(BLUE)‚öôÔ∏è Configura√ß√£o inicial do projeto...$(NC)"
	@if [ ! -f "firebase.json" ]; then \
		echo "$(RED)‚ùå firebase.json n√£o encontrado$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f ".firebaserc" ]; then \
		echo "$(RED)‚ùå .firebaserc n√£o encontrado$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Configura√ß√£o Firebase OK$(NC)"
	@if [ ! -f "index.html" ]; then \
		echo "$(RED)‚ùå index.html n√£o encontrado$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Arquivos do projeto OK$(NC)"
	@echo "$(BLUE)üîß Verificando login no Firebase...$(NC)"
	@if ! firebase projects:list &> /dev/null; then \
		echo "$(YELLOW)‚ö†Ô∏è  N√£o logado no Firebase. Execute: firebase login$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ Firebase autenticado$(NC)"; \
	fi
	@echo "$(GREEN)üéâ Setup completo!$(NC)"

## ‚öôÔ∏è Setup b√°sico (sem verificar index.html)
setup-basic: install
	@echo "$(BLUE)‚öôÔ∏è Configura√ß√£o b√°sica do projeto...$(NC)"
	@if [ ! -f "firebase.json" ]; then \
		echo "$(RED)‚ùå firebase.json n√£o encontrado$(NC)"; \
		exit 1; \
	fi
	@if [ ! -f ".firebaserc" ]; then \
		echo "$(RED)‚ùå .firebaserc n√£o encontrado$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Configura√ß√£o Firebase OK$(NC)"
	@echo "$(BLUE)üîß Verificando login no Firebase...$(NC)"
	@if ! firebase projects:list &> /dev/null; then \
		echo "$(YELLOW)‚ö†Ô∏è  N√£o logado no Firebase. Execute: firebase login$(NC)"; \
	else \
		echo "$(GREEN)‚úÖ Firebase autenticado$(NC)"; \
	fi
	@echo "$(GREEN)üéâ Setup b√°sico completo!$(NC)"

## üî• Ambiente de desenvolvimento
dev: setup-basic build
	@echo "$(BLUE)üî• Iniciando ambiente de desenvolvimento...$(NC)"
	@echo "$(YELLOW)üìç Servidor ser√° iniciado em: http://localhost:$(LOCAL_PORT)$(NC)"
	@echo "$(YELLOW)üí° Pressione Ctrl+C para parar$(NC)"
	@echo ""
	@if ! firebase projects:list &> /dev/null; then \
		echo "$(YELLOW)‚ö†Ô∏è  Firebase n√£o autenticado. Executando sem autentica√ß√£o...$(NC)"; \
		firebase serve --port $(LOCAL_PORT) --host 0.0.0.0; \
	else \
		firebase serve --port $(LOCAL_PORT) --host 0.0.0.0; \
	fi

## üåê Servidor local (alias para dev)
serve: dev

## üöÄ Servidor r√°pido (sem rebuild)
serve-fast:
	@echo "$(BLUE)üöÄ Iniciando servidor r√°pido...$(NC)"
	@echo "$(YELLOW)üìç Servidor em: http://localhost:$(LOCAL_PORT)$(NC)"
	@echo "$(YELLOW)üí° Pressione Ctrl+C para parar$(NC)"
	@echo ""
	@if [ ! -f "index.html" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  index.html n√£o encontrado, executando build...$(NC)"; \
		$(MAKE) build; \
	fi
	firebase serve --port $(LOCAL_PORT) --host 0.0.0.0

## üèóÔ∏è Build para produ√ß√£o
build:
	@echo "$(BLUE)üèóÔ∏è Preparando build para produ√ß√£o...$(NC)"
	@echo "$(YELLOW)üßπ Limpando arquivos antigos...$(NC)"
	@rm -f *.html 2>/dev/null || true
	@rm -rf js/ scripts/ config/ 2>/dev/null || true
	@echo "$(YELLOW)üìÅ Copiando arquivos do src para a raiz...$(NC)"
	@cp -r src/pages/* ./ 2>/dev/null || true
	@cp -r src/js ./ 2>/dev/null || true
	@cp -r src/scripts ./ 2>/dev/null || true
	@cp -r src/config ./ 2>/dev/null || true
	@echo "$(YELLOW)üîß Processando vari√°veis de ambiente...$(NC)"
	@bash process-env.sh
	@echo "$(GREEN)‚úÖ Arquivos copiados e vari√°veis processadas$(NC)"
	@echo "$(BLUE)üìã Arquivos para deploy:$(NC)"
	@ls -la *.html *.js *.css 2>/dev/null || echo "$(YELLOW)‚ö†Ô∏è  Alguns arquivos podem n√£o existir$(NC)"
	@if [ -d "js/" ]; then echo "$(GREEN)‚úÖ Diret√≥rio js/$(NC)"; fi
	@if [ -d "scripts/" ]; then echo "$(GREEN)‚úÖ Diret√≥rio scripts/$(NC)"; fi

## üöÄ Deploy manual
deploy: build
	@echo "$(BLUE)üöÄ Iniciando deploy para Firebase Hosting...$(NC)"
	@if ! firebase projects:list &> /dev/null; then \
		echo "$(RED)‚ùå N√£o logado no Firebase. Execute: firebase login$(NC)"; \
		exit 1; \
	fi
	firebase deploy --only hosting
	@echo ""
	@echo "$(GREEN)üåê Site dispon√≠vel em:$(NC)"
	@echo "   https://$(FIREBASE_PROJECT).web.app"
	@echo "   https://$(FIREBASE_PROJECT).firebaseapp.com"
	@$(MAKE) status

## üîç Verificar status do deploy
status:
	@echo "$(BLUE)üîç Verificando status do site...$(NC)"
	@./check-status.sh

## üß™ Executar testes
test:
	@echo "$(BLUE)üß™ Executando testes...$(NC)"
	@echo "$(YELLOW)üìã Verificando estrutura de arquivos...$(NC)"
	@test -f index.html || { echo "$(RED)‚ùå index.html n√£o encontrado$(NC)"; exit 1; }
	@test -f firebase.json || { echo "$(RED)‚ùå firebase.json n√£o encontrado$(NC)"; exit 1; }
	@test -f .firebaserc || { echo "$(RED)‚ùå .firebaserc n√£o encontrado$(NC)"; exit 1; }
	@echo "$(GREEN)‚úÖ Estrutura de arquivos OK$(NC)"
	@echo "$(YELLOW)üåê Testando conectividade local...$(NC)"
	@if command -v curl &> /dev/null; then \
		echo "$(GREEN)‚úÖ curl dispon√≠vel$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  curl n√£o dispon√≠vel$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Testes b√°sicos conclu√≠dos$(NC)"

## üßπ Limpeza
clean:
	@echo "$(BLUE)üßπ Limpando arquivos tempor√°rios...$(NC)"
	@rm -rf .firebase/
	@rm -f firebase-debug.log
	@rm -f firebase-debug.*.log
	@echo "$(YELLOW)üóëÔ∏è Limpando arquivos copiados do build...$(NC)"
	@rm -f *.html 2>/dev/null || true
	@rm -rf js/ scripts/ config/ 2>/dev/null || true
	@rm -f env-config.js 2>/dev/null || true
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da$(NC)"

## üèóÔ∏è Build limpo (limpa antes de construir)
clean-build: clean build

## üìä Informa√ß√µes do projeto
info:
	@echo "$(BLUE)üìä Informa√ß√µes do Projeto$(NC)"
	@echo ""
	@echo "$(YELLOW)Projeto:$(NC) $(PROJECT_NAME)"
	@echo "$(YELLOW)Node.js:$(NC) $(NODE_VERSION)"
	@echo "$(YELLOW)Firebase:$(NC) $(FIREBASE_PROJECT)"
	@echo "$(YELLOW)Porta Local:$(NC) $(LOCAL_PORT)"
	@echo ""
	@echo "$(BLUE)üåê URLs:$(NC)"
	@echo "  Local:      http://localhost:$(LOCAL_PORT)"
	@echo "  Produ√ß√£o:   https://$(FIREBASE_PROJECT).web.app"
	@echo "  Alternativa: https://$(FIREBASE_PROJECT).firebaseapp.com"
	@echo ""

## üîß Diagn√≥stico completo
diagnose: check-deps info
	@echo "$(BLUE)üîß Diagn√≥stico completo...$(NC)"
	@$(MAKE) test
	@if firebase projects:list &> /dev/null; then \
		echo "$(GREEN)‚úÖ Firebase CLI funcionando$(NC)"; \
		firebase hosting:sites:list; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Firebase CLI n√£o autenticado$(NC)"; \
	fi
