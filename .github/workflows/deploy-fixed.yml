name: 🚀 Deploy to Firebase Hosting

on:
  push:
    branches:
      - main
      - master
      - refactory  # Adicionando branch atual
  pull_request:
    branches:
      - main
      - master

env:
  NODE_VERSION: '20'
  # PNPM removido

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📂 Checkout código
        uses: actions/checkout@v4

      # Setup pnpm removido

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Instalar dependências
        run: |
          echo "📦 Instalando dependências com npm ci..."
          npm ci
          echo "✅ Dependências instaladas com sucesso!"

      - name: � Instalar tipos do React e dependências essenciais
        run: |
          cd frontend
          npm install --save-dev @types/react @types/react-dom
          echo "✅ Tipos do React instalados!"

      - name: �🔍 Verificar estrutura do projeto
        run: |
          echo "📋 Estrutura do projeto:"
          ls -la
          echo ""
          echo "📁 Frontend:"
          ls -la frontend/
          echo ""
          echo "📁 Backend:"
          ls -la backend-ts/

      - name: 🧹 Limpar cache do TypeScript
        run: |
          cd frontend
          if [ -d node_modules/.tmp ]; then
            rm -rf node_modules/.tmp
          fi
          echo "✅ Cache do TypeScript limpo!"

      - name: 🏗️ Build do projeto
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
          NODE_ENV: production
        run: |
          echo "🏗️ Iniciando build do frontend..."
          cd frontend
          npm run build
          echo "✅ Build concluído!"

      - name: 📋 Verificar arquivos de build
        run: |
          echo "📋 Listando arquivos para deploy:"
          ls -la frontend/dist/
          echo ""
          echo "📁 Estrutura do build:"
          find frontend/dist -type f | head -20
          echo ""
          echo "📊 Tamanho dos arquivos principais:"
          du -h frontend/dist/*.html frontend/dist/assets/*.js frontend/dist/assets/*.css 2>/dev/null || true

      # Upload do build como artifact para reutilizar no deploy
      - name: 📤 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: frontend/dist/
          retention-days: 1

  deploy:
    needs: build_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/refactory'
    
    steps:
      - name: 📂 Checkout código
        uses: actions/checkout@v4

      - name: 📥 Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: frontend/dist/

      - name: 🔍 Verificar arquivos baixados
        run: |
          echo "📋 Arquivos para deploy:"
          ls -la frontend/dist/
          echo ""
          echo "🔍 Verificando index.html:"
          head -10 frontend/dist/index.html

      - name: 🚀 Deploy para Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_LOUVOR_IDE }}
          channelId: ${{ github.ref == 'refs/heads/main' && 'live' || 'preview' }}
          projectId: louvor-ide
          expires: 30d

      - name: 🔍 Verificar deploy
        run: |
          echo "✅ Deploy concluído!"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "🌐 Site LIVE disponível em:"
            echo "   https://louvor-ide.web.app"
            echo "   https://louvor-ide.firebaseapp.com"
          else
            echo "🌐 Deploy de PREVIEW realizado"
            echo "   Verifique o URL do preview nos logs acima"
          fi
          echo ""
          echo "🕐 Aguardando propagação..."
          sleep 15

      # Teste pós-deploy desabilitado temporariamente conforme solicitado

  notify:
    needs: [build_and_test, deploy]
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/refactory')
    
    steps:
      - name: 📢 Notificação de status
        run: |
          echo "🎯 Branch: ${{ github.ref_name }}"
          echo "👤 Autor: ${{ github.actor }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo ""
          
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              echo "🎉 Deploy LIVE realizado com sucesso!"
              echo "🌐 Louvor IDE está online em: https://louvor-ide.web.app"
            else
              echo "🎉 Deploy de PREVIEW realizado com sucesso!"
              echo "🌐 Verifique o URL do preview nos logs do deploy"
            fi
          elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
            echo "⏭️ Deploy foi ignorado (não é uma branch de deploy)"
          else
            echo "❌ Falha no deploy"
            echo "📋 Verifique os logs acima para mais detalhes"
          fi
          
          echo ""
          echo "📊 Status dos jobs:"
          echo "   Build e Teste: ${{ needs.build_and_test.result }}"
          echo "   Deploy: ${{ needs.deploy.result }}"
